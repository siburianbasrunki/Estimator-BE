// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  role        Role      @default(USER)
  imageUrl    String?
  imageId     String?
  phoneNumber String?
  otp         String?
  otpExpiry   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

enum Role {
  USER
  ADMIN
}

model Banner {
  id       String @id @default(uuid())
  imageUrl String
  imageId  String
  title    String
  subTitle String
  event    String
}

model Brand {
  id       String   @id @default(uuid())
  name     String?
  imageUrl String
  imageId  String
  cameras  Camera[]
}

model Camera {
  id        String    @id @default(uuid())
  brand     Brand     @relation(fields: [brandId], references: [id])
  brandId   String
  name      String
  price     String
  avaliable Boolean
  imageUrl  String
  imageId   String
  features  Feature[]
  bookings  Booking[]
}

model Feature {
  id       String @id @default(uuid())
  camera   Camera @relation(fields: [cameraId], references: [id])
  cameraId String
  value    String
}

model Booking {
  id         String        @id @default(uuid())
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  camera     Camera        @relation(fields: [cameraId], references: [id])
  cameraId   String
  date       DateTime
  duration   Int
  purpose    String
  status     BookingStatus @default(PENDING)
  totalPrice Float
  payment    Payment?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  PAID
  CANCELLED
  COMPLETED
}

model Payment {
  id      String  @id @default(uuid())
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  bookingId String @unique

  paymentMethod   PaymentMethod
  amount          Float
  status          PaymentStatus @default(PENDING)
  midtransOrderId String?
  paymentCode     String?
  paymentUrl      String?
  expiryTime      DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum PaymentMethod {
  BANK_TRANSFER
  QRIS
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  SETTLED
  EXPIRED
  FAILED
}
